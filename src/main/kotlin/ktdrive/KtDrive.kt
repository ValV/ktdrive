/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ktdrive

import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.client.util.store.FileDataStoreFactory
import com.google.api.services.drive.Drive
import com.google.api.services.drive.DriveScopes
import com.google.api.services.drive.model.File
import com.google.api.services.drive.model.FileList

//import java.security.GeneralSecurityException

class KtDrive {
  companion object {
    const val APPLICATION_NAME = "Kickass Google Drive utility"
    val JSON_FACTORY = JacksonFactory.getDefaultInstance()
    const val TOKENS_DIRECTORY_PATH = "tokens"

    // Global instance of the scopes - delete tokens/ folder on modification
    val SCOPES = listOf(DriveScopes.DRIVE_METADATA_READONLY)
    const val CREDENTIALS_FILE_PATH = "/credentials.json"

    /**
     * Creates an authorized Credential object
     * @param HTTP_TRANSPORT The network HTTP Transport
     * @return An authorized Credential object
     * @throws Exception If the credentials.json cannot be found
     */
    @Throws(Exception::class)
    private fun getCredentials(HTTP_TRANSPORT: NetHttpTransport): Credential {
      // Load client secrets
      val inc = KtDrive::class.java.getResourceAsStream(CREDENTIALS_FILE_PATH) ?:
        throw Exception("Resource not found $CREDENTIALS_FILE_PATH")
      val clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, inc.bufferedReader())

      // Build flow and trigger user authorization request
      val flow: GoogleAuthorizationCodeFlow = GoogleAuthorizationCodeFlow.Builder(
        HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, SCOPES)
        .setDataStoreFactory(FileDataStoreFactory(java.io.File(TOKENS_DIRECTORY_PATH)))
        .setAccessType("offline")
        .build()
      val receiver = LocalServerReceiver.Builder().setPort(8888).build()
      return AuthorizationCodeInstalledApp(flow, receiver).authorize("user")
    }

    public fun run() {
      // Build a new authorized API client service
      val HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport()
      val service = Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, getCredentials(HTTP_TRANSPORT))
        .setApplicationName(APPLICATION_NAME)
        .build()

      // Print the names and IDs for up to 10 files
      val result = service.files().list().setPageSize(10)
        .setFields("nextPageToken, files(id, name)").execute()
      val files: List<File>? = result.getFiles()
      if (files.isNullOrEmpty()) {
        println("No files found...")
      } else {
        println("Files:")
        for (file in files) {
          println("${file.getName()} (${file.getId()})")
        }
      }
    }
  }
}

fun main(args: Array<String>) {
  KtDrive.run()
}

// vim: se et ts=2 sw=2 number:
